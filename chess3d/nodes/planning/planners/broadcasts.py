import logging

from dmas.utils import runtime_tracker

from chess3d.messages import MeasurementRequestMessage
from chess3d.nodes.planning.plan import Plan
from chess3d.nodes.planning.planner import AbstractReplanner
from chess3d.nodes.science.requests import MeasurementRequest
from chess3d.nodes.states import SimulationAgentState


class BreadcastReplanner(AbstractReplanner):
    def __init__(self, logger: logging.Logger = None) -> None:
        """ broadcasts whenever there are pending relays or measurement requests that have not been broadcasted """
        super().__init__(logger)
        self.pending_reqs_to_broadcast = set()

    def update_percepts(self, 
                        state: SimulationAgentState, 
                        current_plan: Plan, 
                        incoming_reqs: list, 
                        relay_messages: list, 
                        misc_messages: list, 
                        completed_actions: list, 
                        aborted_actions: list, 
                        pending_actions: list
                        ) -> None:
        super().update_percepts(state, current_plan, incoming_reqs, relay_messages, misc_messages, completed_actions, aborted_actions, pending_actions)

        # get list of measurement requests newly generated by the parent agent
        my_reqs = {req 
                   for req in incoming_reqs
                   if isinstance(req, MeasurementRequest)
                   and req.requester == state.agent_name}
        
        # update list of pending requests to broadcast
        self.pending_reqs_to_broadcast.update(my_reqs)

        # remove from list of pending requests to breadcasts if they've been broadcasted already
        broadcasted_reqs = {MeasurementRequest.from_dict(msg.req) 
                            for msg in self.completed_broadcasts
                            if isinstance(msg, MeasurementRequestMessage)}
        for req in broadcasted_reqs:
            if req in self.pending_reqs_to_broadcast:
                self.pending_reqs_to_broadcast.remove(req)

    @runtime_tracker
    def needs_planning( self, 
                        state : SimulationAgentState,
                        current_plan : Plan, 
                        **_
                        ) -> bool:
        """ """
        return (super().needs_planning(state, current_plan) 
                or len(self.pending_relays) > 0
                or len(self.pending_reqs_to_broadcast))